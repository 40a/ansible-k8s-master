---

#***install required packages
- name: Ensure required kubernetes master packages are installed
  yum: name='{{ item }}' state=latest
  with_items: '{{ k8s_mst_packages }}'

- name: Ensure cockpit-kubernetes is installed
  yum: name=cockpit-kubernetes state=latest
  when: k8s_cockpit == True
  notify:
    - Remove default cockpit packages
    - Setup CentOS7-Extras Repository for cockpit-kubernetes
    - Install cockpit-kubernetes
    - Disable CentOS7-Extras Repository post cockpit-kubernetes install 
    - Enable cockpit
    - Restart cockpit

#****Configure general kubernetes settings
#config
- name: Configure etcd settings
  template: src=etcd/etcd.conf.j2 dest=/etc/etcd/etcd.conf
  notify:
    - Restart etcd
    - Restart kube-apiserver
    - Restart flanneld
    - Restart kube-proxy

- name: Configure kubernetes general settings
  template: src=kubernetes/config.j2 dest=/etc/kubernetes/config
  notify:
    - Restart kube-scheduler
    - Restart kube-controller-manager
    - Restart kube-proxy
    - Restart flanneld

#scheduler
- name: Configure kube-scheduler settings
  template: src=kubernetes/scheduler.j2 dest=/etc/kubernetes/scheduler
  notify: Restart kube-scheduler

#controller-manager
- name: Configure kube-controller-manager settings
  template: src=kubernetes/controller-manager.j2 dest=/etc/kubernetes/controller-manager
  notify: Restart kube-controller-manager

#***************************************************************************************************
#Check presence of apiserver certificate path
- name: Check for presence of kube-apiserver certificate path
  stat: path="{{ k8s_apiserver_cert_path }}"
  register: apiserver_cert_path

- name: Create kube-apiserver certificate path
  file: path="{{ k8s_apiserver_cert_path }}" state=directory mode=744 group=root owner=kube
  when: "apiserver_cert_path.stat.exists != True"

#Check presence of apiserver certificates
- name: Check for presence of kube-apiserver CA key
  stat: path="{{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_key_filename }}"
  register: apiserver_ca_key

- name: Check for presence of kube-apiserver CA certificate
  stat: path="{{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_cert_filename }}"
  register: apiserver_ca_cert

- name: Check for presence of kube-apiserver server key
  stat: path="{{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_key_filename }}"
  register: apiserver_server_key

- name: Check for presence of kube-apiserver server certificate signing request
  stat: path="{{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_csr_filename }}"
  register: apiserver_server_csr

- name: Check for presence of kube-apiserver server certificate
  stat: path="{{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_cert_filename }}"
  register: apiserver_server_cert

#Create openssl config
- name: Create Custom OpenSSL Config for kubernetes master certificates
  template: src=openssl/openssl.conf.j2 dest=/etc/kubernetes/auth/openssl.conf

#Generate apiserver certificates ref: http://kubernetes.io/docs/admin/authentication/
- name: Generate kube-apiserver CA key
  shell: /usr/bin/openssl genrsa -out {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_key_filename }} 2048
  when: "apiserver_ca_key.stat.exists != True"
  notify:
    - Fetch kube-apiserver Certificates and keys

- name: Generate kube-apiserver CA certificate
  shell: /usr/bin/openssl req -x509 -new -nodes -key {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_key_filename }} -subj "/CN='{{ k8s_apiserver_listen_ip }}'" -days 10000 -out {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_cert_filename }} -config /etc/kubernetes/auth/openssl.conf
  when: "apiserver_ca_cert.stat.exists != True"
  notify:
    - Fetch kube-apiserver Certificates and keys

- name: Generate kube-apiserver server key
  shell: /usr/bin/openssl genrsa -out {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_key_filename }} 2048
  when: "apiserver_server_key.stat.exists != True"
  notify:
    - Fetch kube-apiserver Certificates and keys

- name: Generate kube-apiserver server certificate signing request
  shell: /usr/bin/openssl req -new -key {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_key_filename }} -subj "/CN='{{ k8s_apiserver_listen_ip }}'" -out {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_csr_filename }}
  when: "apiserver_server_csr.stat.exists != True"
  notify:
    - Fetch kube-apiserver Certificates and keys

- name: Generate kube-apiserver server certificate
  shell: /usr/bin/openssl x509 -req -in {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_csr_filename }} -CA {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_cert_filename }} -CAkey {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_key_filename }} -CAcreateserial -out {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_cert_filename }} -days 10000 -extensions v3_req -extfile /etc/kubernetes/auth/openssl.conf
  when: "apiserver_server_cert.stat.exists != True"
  notify:
    - Fetch kube-apiserver Certificates and keys

- name: Ensure proper permissions on apiserver certificates
  file: dest="{{  k8s_apiserver_cert_path }}/{{ item }}" mode=770 owner=kube group=root state=file
  with_items:
    - '{{ k8s_apiserver_ca_key_filename }}'
    - '{{ k8s_apiserver_ca_cert_filename }}'
    - '{{ k8s_apiserver_server_key_filename }}'
    - '{{ k8s_apiserver_server_csr_filename }}'
    - '{{ k8s_apiserver_server_cert_filename }}'

#****************************************************************************************************


#***Configure kubernetes apiserver settings
- name: Configure kube-apiserver settings
  template: src=kubernetes/apiserver.j2 dest=/etc/kubernetes/apiserver
  notify: 
    - Restart kube-apiserver
    - Restart kube-scheduler
    - Restart kube-controller-manager
    - Restart kube-proxy
    - Restart flanneld

#***Enable and Startup core services

#etcd
- name: Enable and Start etcd service
  service: name=etcd enabled=yes state=started

#apiserver
- name: Enable and Start kube-apiserver service
  service: name=kube-apiserver enabled=yes state=started

#controller-manager
- name: Enable and Start kube-controller-manager service
  service: name=kube-controller-manager enabled=yes state=started

#scheduler
- name: Enable and Start kube-scheduler service
  service: name=kube-scheduler enabled=yes state=started

#***Setup flanneld backend network

#check etcd key
- name: Check to see if flanneld network config exists in etcd
  command: /usr/bin/etcdctl ls '{{ etcd_key }}'/config
  register: etcdctl_result
  changed_when: "etcdctl_result.rc != 0"
  ignore_errors: yes
  notify:
    - Configure flanneld network key in etcd
    - Restart etcd

- name: Move flanneld network config to master
  template: src=flannel/flanneld-conf.json.j2 dest=/etc/kubernetes/flanneld-conf.json
  notify: 
    - Configure flanneld network key in etcd
    - Restart etcd

#***Remaining Configuration
#Configure local flannel settings
- name: Configure local flanneld settings
  template: src=sysconfig/flanneld.j2 dest=/etc/sysconfig/flanneld
  when: k8s_mst_is_node == False

#Configure kube-proxy
- name: Configure kube-proxy
  template: src=kubernetes/proxy.j2 dest=/etc/kubernetes/proxy
  when: k8s_mst_is_node == False

#***Remaining Services
#Enable and startup flanneld
- name: Enable flanneld service
  service: name=flanneld enabled=yes
  notify: Restart flanneld
  when: k8s_mst_is_node == False

#Enable and startup kube-proxy
- name: Enable kube-proxy service
  service: name=kube-proxy enabled=yes
  notify: Restart kube-proxy
  when: k8s_mst_is_node == False

#docker - make sure disabled, when this is not a node
- name: Ensure docker is not enabled
  service: name=docker enabled=no state=stopped
  when: k8s_mst_is_node == False
