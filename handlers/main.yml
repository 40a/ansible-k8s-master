---

#Remediation for install cockpit-kubernetes on RHEL system
- name: Remove default cockpit packages
  yum: name='{{ item }}' state=removed
  with_items: '{{ cockpit_default }}'
  when: k8s_cockpit == True

#Remediation for Ensure cockpit-kubernetes
- name: Setup CentOS7-Extras Repository for cockpit-kubernetes
  yum_repository:
    name: centos7-extras
    description: CentOS7 - Extras
    baseurl: http://mirror.centos.org/centos/7/extras/x86_64/
    enabled: yes
    gpgcheck: yes
    gpgkey: http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-7
    includepkgs: cockpit-kubernetes cockpit-shell cockpit-bridge cockpit cockpit-ws cockpit-networkmanager cockpit-storaged cockpit-docker
  when: k8s_cockpit == True

- name: Configure flanneld network key in etcd
  command: /usr/bin/curl -L '{{ etcd_server_url }}':'{{ etcd_port }}'/v2/keys'{{ etcd_key }}'/config -XPUT --data-urlencode value@flanneld-conf.json
  args:
    chdir: /etc/kubernetes/
  when: "etcdctl_result.rc == 4"


- name: Install cockpit-kubernetes
  yum: name='{{ item }}' state=latest
  with_items: '{{ cockpit_kubernetes_pkg }}'
  when: k8s_cockpit == True

- name: Disable CentOS7-Extras Repository post cockpit-kubernetes install
  yum_repository:
    name: centos7-extras
    description: CentOS7 - Extras
    baseurl: http://mirror.centos.org/centos/7/extras/x86_64/
    enabled: no
    gpgcheck: yes
    gpgkey: http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-7
    includepkgs: cockpit-kubernetes cockpit-shell cockpit-bridge cockpit cockpit-ws cockpit-networkmanager cockpit-storaged cockpit-docker
  when: k8s_cockpit == True


#Service Restarts
- name: Restart kube-scheduler
  service: name=kube-scheduler state=restarted

- name: Restart kube-controller-manager
  service: name=kube-controller-manager state=restarted

- name: Restart kube-proxy
  service: name=kube-proxy state=restarted
  when: k8s_mst_is_node == False

- name: Restart flanneld
  service: name=flanneld state=restarted
  when: k8s_mst_is_node == False

- name: Restart kube-apiserver
  service: name=kube-apiserver state=restarted

- name: Enable cockpit
  service: name=cockpit.socket enabled=yes
  when: k8s_cockpit == True

- name: Restart cockpit
  service: name=cockpit state=restarted
  when: k8s_cockpit == True

#Retrieve apiserver certificates
- name: Fetch kube-apiserver Certificates and keys
  fetch: src="{{ k8s_apiserver_cert_path }}/{{ item }}"  dest=/etc/ansible/files/k8s-master-certs/{{ ansible_hostname }}/ validate_checksum=yes flat=yes
  with_items:
    - '{{ k8s_apiserver_ca_key_filename }}'
    - '{{ k8s_apiserver_ca_cert_filename }}'
